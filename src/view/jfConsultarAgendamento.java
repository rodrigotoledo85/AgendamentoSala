/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.bean.Agendamento;
import model.bean.Espaco;
import model.bean.Horario;
import model.bean.Status;
import model.bean.Turno;
import model.bean.Usuario;
import model.dao.AgendamentoDAO;

/**
 *
 * @author rodrigo
 */
public class jfConsultarAgendamento extends javax.swing.JFrame {

    /**
     * Creates new form jfConsultarAgendamento
     */
    Agendamento objAgendamento;
    AgendamentoDAO objDAO;
    Vector<Usuario> usuarios;
    Vector<Turno> turnos;
    Vector<Horario> horarios;
    Vector<Espaco> espacos;
    Vector<Status> status;

    Agendamento agendamento = new Agendamento();

    public jfConsultarAgendamento() {
        initComponents();
        DefaultTableModel modelo = (DefaultTableModel) jTConsultaAgendamento.getModel();
        jTConsultaAgendamento.setRowSorter(new TableRowSorter(modelo));

        try {
            objAgendamento = new Agendamento();
            objDAO = new AgendamentoDAO();

            usuarios = objDAO.listarUsuarios();
            comboboxUsuario();

            status = objDAO.listarStatus();
            comboboxStatus();

            turnos = objDAO.listarTurnos();
            comboboxTurno();

            horarios = objDAO.listarHorarios();
            comboboxHorario();

            espacos = objDAO.listarEspacos();
            comboboxEspaco();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro: " + ex.getMessage());
        }
    }

    public void lerJTable(String dataAgendamento) {
        DefaultTableModel modelo = (DefaultTableModel) jTConsultaAgendamento.getModel();
        modelo.setNumRows(0);
        AgendamentoDAO adao = new AgendamentoDAO();

        for (Agendamento a : adao.pesquisarAgendamento(dataAgendamento)) {
            modelo.addRow(new Object[]{
                a.getCodAgendamento(),
                a.getDataAgendamento(),
                a.getStatus(),
                a.getUsuario(),
                a.getTurno(),
                a.getHorario(),
                a.getEspaco(),
                a.getDesObservacao()

            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDataPesquisa = new javax.swing.JLabel();
        jftDataPesquisa = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTConsultaAgendamento = new javax.swing.JTable();
        jbPesquisar = new javax.swing.JButton();
        jbNovoAgendamento = new javax.swing.JButton();
        jbSair = new javax.swing.JButton();
        jbAtualizarAgendamento = new javax.swing.JButton();
        jlUsuario = new javax.swing.JLabel();
        jcUsuario = new javax.swing.JComboBox<>();
        jlData = new javax.swing.JLabel();
        jftData = new javax.swing.JFormattedTextField();
        jlStatus = new javax.swing.JLabel();
        jcStatus = new javax.swing.JComboBox<>();
        jlTurno = new javax.swing.JLabel();
        jlHorario = new javax.swing.JLabel();
        jlEspaco = new javax.swing.JLabel();
        jlObservacao = new javax.swing.JLabel();
        jcTurno = new javax.swing.JComboBox();
        jcHorario = new javax.swing.JComboBox();
        jcEspaco = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaObservacao = new javax.swing.JTextArea();
        jlPesquisarAgendamento = new javax.swing.JLabel();
        jlDadosAgendamento = new javax.swing.JLabel();
        jlUserSelecionado = new javax.swing.JLabel();
        jlDtaSelecionado = new javax.swing.JLabel();
        jlStatusSelecionado = new javax.swing.JLabel();
        jlTurnoSelecionado = new javax.swing.JLabel();
        jlHorarioSelecionado = new javax.swing.JLabel();
        jlEspacoSelecionado = new javax.swing.JLabel();
        jlObsSelecionado = new javax.swing.JLabel();
        jtUserSelecionado = new javax.swing.JTextField();
        jtDataSelecionada = new javax.swing.JTextField();
        jtStatusSelecionado = new javax.swing.JTextField();
        jtTurnoSelecionado = new javax.swing.JTextField();
        jtHorarioSelecionado = new javax.swing.JTextField();
        jtEspacoSelecionado = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaObservacaoSelecionado = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jlCodSelecionado = new javax.swing.JLabel();
        jtCodigoSelecionado = new javax.swing.JTextField();
        jbAjuda = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciar Agendamentos");
        setResizable(false);

        jlDataPesquisa.setText("Pesquisar Data Agendamento:");

        try {
            jftDataPesquisa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jTConsultaAgendamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Código do agendamento", "Data Agendamento", "Status", "Usuário", "Turno", "Horário", "Espaço", "Observações"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTConsultaAgendamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTConsultaAgendamentoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTConsultaAgendamento);

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jbNovoAgendamento.setText("Salvar Novo Agendamento");
        jbNovoAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoAgendamentoActionPerformed(evt);
            }
        });

        jbSair.setText("Sair");
        jbSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSairActionPerformed(evt);
            }
        });

        jbAtualizarAgendamento.setText("Atualizar Agendamento");
        jbAtualizarAgendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarAgendamentoActionPerformed(evt);
            }
        });

        jlUsuario.setText("Usuário:");

        jcUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlData.setText("Data Agendamento:");

        try {
            jftData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jlStatus.setText("Status:");

        jcStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jlTurno.setText("Turno:");

        jlHorario.setText("Horário:");

        jlEspaco.setText("Espaço:");

        jlObservacao.setText("Observação:");

        jcTurno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcHorario.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcEspaco.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jtaObservacao.setColumns(20);
        jtaObservacao.setRows(5);
        jScrollPane2.setViewportView(jtaObservacao);

        jlPesquisarAgendamento.setText("Pesquisar Agendamento.");

        jlDadosAgendamento.setText("Criar Novo/Atualizar Agendamento.");

        jlUserSelecionado.setText("Usuário:");

        jlDtaSelecionado.setText("Data Agendamento:");

        jlStatusSelecionado.setText("Status:");

        jlTurnoSelecionado.setText("Turno:");

        jlHorarioSelecionado.setText("Horário:");

        jlEspacoSelecionado.setText("Espaço:");

        jlObsSelecionado.setText("Observação:");

        jtUserSelecionado.setEnabled(false);

        jtDataSelecionada.setEnabled(false);

        jtStatusSelecionado.setEnabled(false);

        jtTurnoSelecionado.setEnabled(false);

        jtHorarioSelecionado.setEnabled(false);

        jtEspacoSelecionado.setEnabled(false);

        jtaObservacaoSelecionado.setColumns(20);
        jtaObservacaoSelecionado.setRows(5);
        jtaObservacaoSelecionado.setEnabled(false);
        jScrollPane3.setViewportView(jtaObservacaoSelecionado);

        jLabel8.setText("Dados Agendamento selecionado.");

        jlCodSelecionado.setText("Código Agendamento:");

        jtCodigoSelecionado.setEnabled(false);

        jbAjuda.setText("Ajuda");
        jbAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAjudaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlPesquisarAgendamento)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlDataPesquisa)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jftDataPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbPesquisar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbNovoAgendamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAtualizarAgendamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSair)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAjuda)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jlUsuario)
                                    .addComponent(jlData)
                                    .addComponent(jlTurno)
                                    .addComponent(jlHorario)
                                    .addComponent(jlEspaco)
                                    .addComponent(jlObservacao))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcUsuario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                                    .addComponent(jcEspaco, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcHorario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcTurno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jftData, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jlStatus)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jlDadosAgendamento))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jlUserSelecionado, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jlObsSelecionado, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jlCodSelecionado)
                                        .addComponent(jlDtaSelecionado, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(jlEspacoSelecionado, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jtCodigoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jlStatusSelecionado)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtStatusSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jtEspacoSelecionado, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jtDataSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jlTurnoSelecionado)
                                                .addGap(6, 6, 6)
                                                .addComponent(jtTurnoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addComponent(jlHorarioSelecionado)
                                        .addGap(4, 4, 4)
                                        .addComponent(jtHorarioSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jtUserSelecionado)
                                    .addComponent(jScrollPane3))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jlDadosAgendamento))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlUsuario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlData)
                            .addComponent(jftData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlStatus)
                            .addComponent(jcStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlTurno)
                            .addComponent(jcTurno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlHorario)
                            .addComponent(jcHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlEspaco)
                            .addComponent(jcEspaco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlObservacao)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlCodSelecionado)
                            .addComponent(jtCodigoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlStatusSelecionado)
                            .addComponent(jtStatusSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtUserSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlUserSelecionado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlDtaSelecionado)
                            .addComponent(jtDataSelecionada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlTurnoSelecionado)
                            .addComponent(jtTurnoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlHorarioSelecionado)
                            .addComponent(jtHorarioSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jlEspacoSelecionado)
                            .addComponent(jtEspacoSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlObsSelecionado)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNovoAgendamento)
                    .addComponent(jbAtualizarAgendamento)
                    .addComponent(jbSair)
                    .addComponent(jbAjuda))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlPesquisarAgendamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jftDataPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar)
                    .addComponent(jlDataPesquisa))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed

        String ano = jftDataPesquisa.getText().substring(0, 2);
        String mes = jftDataPesquisa.getText().substring(3, 5);
        String dia = jftDataPesquisa.getText().substring(6);
        String dataformatada = dia + "-" + mes + "-" + ano;

        agendamento.setDataAgendamento(dataformatada);
        lerJTable(dataformatada);
    }//GEN-LAST:event_jbPesquisarActionPerformed
    
    private void jbNovoAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoAgendamentoActionPerformed
        try {
            if(validarCampos()){
                if (preencherCampos()) {
                    if (objDAO.salvarAgendamento(objAgendamento)) {
                        JOptionPane.showMessageDialog(this, "Agendamento salvo com sucesso!!!");
                        limparCampos();
                    }
                }
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao salvar agendamento: " + e.getMessage());
        }
    }//GEN-LAST:event_jbNovoAgendamentoActionPerformed

    private void jTConsultaAgendamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTConsultaAgendamentoMouseClicked
        // TODO add your handling code here:
        if (jTConsultaAgendamento.getSelectedRow() != -1) {
            jtCodigoSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 0).toString());
            jtUserSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 3).toString());      
            jtDataSelecionada.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 1).toString());
            jtStatusSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 2).toString());
            jtTurnoSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 4).toString());
            jtHorarioSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 5).toString());
            jtEspacoSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 6).toString());
            jtaObservacaoSelecionado.setText(jTConsultaAgendamento.getValueAt(jTConsultaAgendamento.getSelectedRow(), 7).toString());
        }
    }//GEN-LAST:event_jTConsultaAgendamentoMouseClicked

    private void jbAtualizarAgendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarAgendamentoActionPerformed
        // TODO add your handling code here:
        try {
            if (preencherCamposAtualizar()) {
                if (objDAO.atualizarAgendamento(objAgendamento)) {
                    JOptionPane.showMessageDialog(this, "Agendamento Atualizado com sucesso!!!");
                    limparCampos();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar agendamento: " + e.getMessage());
        }
    }//GEN-LAST:event_jbAtualizarAgendamentoActionPerformed

    private void jbSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSairActionPerformed

    private void jbAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAjudaActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Ajuda da tela - Gerenciar Agendamentos.\n"
                + "Nesta tela está as funcionabilidades: Pesquisar agendamento por data, salvar novo agendamento e atualizar um agendamento.\n"
                + "No campo - Pesquisar Data Agendamento - o usuário informara a data que ele quer pesquisar se ha algum agendamento marcado.\n"
                + "O resulta será exibido na tabela abaixo. Sera exibido todos os agendamentos marcados na data pesquisada.\n"
                + "Para editar um agendamento marcado o usuário deverá clicar no na linha da tabela onde esta seu agendamento para que os dados\n"
                + "do agendamento apareçam nos campos que estão na área de - Dados Agendamento selecionado. E para alterar esse dados basta\n"
                + "preencher os campos que estão na área - Criar Novo/Atualizar Agendamento - substituindo os dados pelos corretos. Ao terminar\n"
                + "clicar no botão - Atualizar Agendamento - para atualizar os dados. Para verificar se os dados foram alterados, pesquise novamente\n"
                + "pela data e verifique na tabela se foi realmente alterado\n"
                + "Para criar um novo agendamento basta preencher os campos da área - Criar Novo/Atualizar Agendamento - e clicar em - Salvar Novo Agendamento.\n"
                + "O status varia de - Confirmado - que é quando o usuário tem a certeza de que irá utilizar o espaço agendado e opção - Pendente -\n"
                + "é quando o usuário do sistema não tem certeza que irá utilizar o espaço mas deixou marcado ate descidir.\n"
                + "Ao clicar no botão - Sair - a tela sera fechada e voltara para a tela principal do sistema.");
    }//GEN-LAST:event_jbAjudaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfConsultarAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfConsultarAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfConsultarAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfConsultarAgendamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfConsultarAgendamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTConsultaAgendamento;
    private javax.swing.JButton jbAjuda;
    private javax.swing.JButton jbAtualizarAgendamento;
    private javax.swing.JButton jbNovoAgendamento;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbSair;
    private javax.swing.JComboBox jcEspaco;
    private javax.swing.JComboBox jcHorario;
    private javax.swing.JComboBox<String> jcStatus;
    private javax.swing.JComboBox jcTurno;
    private javax.swing.JComboBox<String> jcUsuario;
    private javax.swing.JFormattedTextField jftData;
    private javax.swing.JFormattedTextField jftDataPesquisa;
    private javax.swing.JLabel jlCodSelecionado;
    private javax.swing.JLabel jlDadosAgendamento;
    private javax.swing.JLabel jlData;
    private javax.swing.JLabel jlDataPesquisa;
    private javax.swing.JLabel jlDtaSelecionado;
    private javax.swing.JLabel jlEspaco;
    private javax.swing.JLabel jlEspacoSelecionado;
    private javax.swing.JLabel jlHorario;
    private javax.swing.JLabel jlHorarioSelecionado;
    private javax.swing.JLabel jlObsSelecionado;
    private javax.swing.JLabel jlObservacao;
    private javax.swing.JLabel jlPesquisarAgendamento;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlStatusSelecionado;
    private javax.swing.JLabel jlTurno;
    private javax.swing.JLabel jlTurnoSelecionado;
    private javax.swing.JLabel jlUserSelecionado;
    private javax.swing.JLabel jlUsuario;
    private javax.swing.JTextField jtCodigoSelecionado;
    private javax.swing.JTextField jtDataSelecionada;
    private javax.swing.JTextField jtEspacoSelecionado;
    private javax.swing.JTextField jtHorarioSelecionado;
    private javax.swing.JTextField jtStatusSelecionado;
    private javax.swing.JTextField jtTurnoSelecionado;
    private javax.swing.JTextField jtUserSelecionado;
    private javax.swing.JTextArea jtaObservacao;
    private javax.swing.JTextArea jtaObservacaoSelecionado;
    // End of variables declaration//GEN-END:variables

    
    public boolean validarCampos() {
        
        if (jcUsuario.getSelectedItem().toString().equals("<Selecione>")) {
            JOptionPane.showMessageDialog(null, "Favor selecionar o seu usuario para realizar o agendamento!");
            jcUsuario.requestFocus();
            return false;
        }
        
        if (jftData.getText().equals("  -  -    ")) {
            JOptionPane.showMessageDialog(this, "Preencha o campo de data para concluir o agendamento!");
            jftData.requestFocus();
            return false;
        }
        
        if (jcStatus.getSelectedItem().toString().equals("<Selecione>")) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um status para o agendamento!");
            jcStatus.requestFocus();
            return false;
        }
        
        if (jcTurno.getSelectedItem().toString().equals("<Selecione>")) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um turno para o agendamento!");
            jcTurno.requestFocus();
            return false;
        }
        
        if (jcHorario.getSelectedItem().toString().equals("<Selecione>")) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um horario para o agendamento!");
            jcHorario.requestFocus();
            return false;
        }
        
        if (jcEspaco.getSelectedItem().toString().equals("<Selecione>")) {
            JOptionPane.showMessageDialog(null, "Favor selecionar um espaço para o agendamento!");
            jcEspaco.requestFocus();
            return false;
        }
        
        if (jtaObservacao.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Preencha uma observação para concluir o agendamento!");
            jtaObservacao.requestFocus();
            return false;
        }
        return true;
    }
    
    public void limparCampos() {
        jcUsuario.setSelectedIndex(0);
        jftData.setText("");
        jcStatus.setSelectedIndex(0);
        jcTurno.setSelectedIndex(0);
        jcHorario.setSelectedIndex(0);
        jcEspaco.setSelectedIndex(0);
        jcEspaco.setSelectedIndex(0);
        jtaObservacao.setText("");
        
        jtCodigoSelecionado.setText("");
        jtDataSelecionada.setText("");
        jtEspacoSelecionado.setText("");
        jtHorarioSelecionado.setText("");
        jtStatusSelecionado.setText("");
        jtTurnoSelecionado.setText("");
        jtUserSelecionado.setText("");
        jtaObservacaoSelecionado.setText("");

    }

    public boolean preencherCampos() {
        //0000/00/00
        String ano = jftData.getText().substring(0, 2);
        String mes = jftData.getText().substring(3, 5);
        String dia = jftData.getText().substring(6);
        String dataMySQL = dia + "-" + mes + "-" + ano;

        objAgendamento.setDataAgendamento(dataMySQL);
        objAgendamento.setUsuario(usuarios.get(jcUsuario.getSelectedIndex()));
        objAgendamento.setEspaco(espacos.get(jcEspaco.getSelectedIndex()));
        objAgendamento.setHorario(horarios.get(jcHorario.getSelectedIndex()));
        objAgendamento.setTurno(turnos.get(jcTurno.getSelectedIndex()));
        objAgendamento.setDesObservacao(jtaObservacao.getText());
        objAgendamento.setStatus(status.get(jcStatus.getSelectedIndex()));
        return true;
    }

    public boolean preencherCamposAtualizar() {
        //0000/00/00
        String ano = jftData.getText().substring(0, 2);
        String mes = jftData.getText().substring(3, 5);
        String dia = jftData.getText().substring(6);
        String dataMySQL = dia + "-" + mes + "-" + ano;

        objAgendamento.setCodAgendamento(Integer.parseInt(jtCodigoSelecionado.getText()));
        objAgendamento.setDataAgendamento(dataMySQL);
        objAgendamento.setUsuario(usuarios.get(jcUsuario.getSelectedIndex()));
        objAgendamento.setEspaco(espacos.get(jcEspaco.getSelectedIndex()));
        objAgendamento.setHorario(horarios.get(jcHorario.getSelectedIndex()));
        objAgendamento.setTurno(turnos.get(jcTurno.getSelectedIndex()));
        objAgendamento.setDesObservacao(jtaObservacao.getText());
        objAgendamento.setStatus(status.get(jcStatus.getSelectedIndex()));
        return true;
    }

    private void comboboxEspaco() {
        try {
            if (espacos.size() == 0) {
                Vector msg = new Vector();
                msg.add("Não a espaços cadastrados!");
                jcEspaco.setEnabled(false);
                jcEspaco.setModel(new DefaultComboBoxModel(msg));
            } else {
                jcEspaco.setModel(new DefaultComboBoxModel(espacos));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }

    private void comboboxStatus() {
        try {
            if (status.size() == 0) {
                Vector msg = new Vector();
                msg.add("Não a status cadastrados!");
                jcStatus.setEnabled(false);
                jcStatus.setModel(new DefaultComboBoxModel(msg));
            } else {
                jcStatus.setModel(new DefaultComboBoxModel(status));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }

    private void comboboxHorario() {
        try {
            if (horarios.size() == 0) {
                Vector msg = new Vector();
                msg.add("Não a horários cadastrados!");
                jcHorario.setEnabled(false);
                jcHorario.setModel(new DefaultComboBoxModel(msg));
            } else {
                jcHorario.setModel(new DefaultComboBoxModel(horarios));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }

    private void comboboxTurno() {
        try {
            if (turnos.size() == 0) {
                Vector msg = new Vector();
                msg.add("Não a turnos cadastrados!");
                jcTurno.setEnabled(false);
                jcTurno.setModel(new DefaultComboBoxModel(msg));
            } else {
                jcTurno.setModel(new DefaultComboBoxModel(turnos));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }

    private void comboboxUsuario() {
        try {
            if (usuarios.size() == 0) {
                Vector msg = new Vector();
                msg.add("Não a usuários cadastrados!");
                jcUsuario.setEnabled(false);
                jcUsuario.setModel(new DefaultComboBoxModel(msg));
            } else {
                jcUsuario.setModel(new DefaultComboBoxModel(usuarios));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro: " + e.getMessage());
        }
    }
}
